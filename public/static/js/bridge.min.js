/*! bridge.min.js build:0.0.1, production. Copyright(c) 2011 Flotype <team@flotype.com> MIT Licensed */
function Connection(a){var b=this;this.Bridge=a,this.options=a.options;if(!this.options.host||!this.options.port)if(this.options.tcp){var c=url.parse(this.options.redirector);http.get({host:c.hostname,port:c.port,path:"/redirect/"+this.options.apiKey},function(a){var c="";a.on("data",function(a){c+=a}),a.on("end",function(){try{var a=JSON.parse(c);b.options.host=a.data.bridge_host,b.options.port=a.data.bridge_port;if(!b.options.host||!b.options.port)throw"Could not find host and port in JSON";b.establishConnection()}catch(d){util.error("Unable to parse redirector response "+c)}})}).on("error",function(a){throw a})}else{window.bridgeHost=function(a,c,d){b.options.host=c,b.options.port=parseInt(d,10),b.establishConnection(),delete window.bridgeHost};var d=document.createElement("script");d.setAttribute("src",this.options.redirector+"/redirect/"+this.options.apiKey+"/jsonp"),document.getElementsByTagName("head")[0].appendChild(d)}else this.establishConnection()}function Bridge(a){var b=this,c={hook_channel_handler:function(a,c,d){b.children["channel:"+a]=b.children[c._getRef()._pathchain[2]];if(d){var e=b.getPathObj(["channel",a,"channel:"+a]);e._setOps(util.findKeys(b.children["channel:"+a])),d.call(e,a)}},getservice:function(a,c){util.hasProp(b.children,a)?c.call(b.children[a]):c.call(null,"Cannot find service "+a)},remoteError:function(a){util.warn(a),b.emit("remoteError",[a])}};this.options=util.extend(defaultOptions,a),util.setLogLevel(this.options.log),this.children={system:c},this.connected=!1,this.connection=new Connection(this),this._events={}}var log;window.console&&console.log?log=function(){console.log.apply(console,arguments)}:log=function(){};var util={hasProp:function(a,b){return Object.prototype.hasOwnProperty.call(Object(a),b)},extend:function(a,b){function d(){this.constructor=a}if(a===undefined||b===undefined)return a;for(var c in b)util.hasProp(b,c)&&(a[c]=b[c]);return d.prototype=b.prototype,a.prototype=new d,a.__super__=b.prototype,a},generateGuid:function(){var a=function(){return((1+Math.random())*65536|0).toString(16).substring(1)};return""+a()+a()+a()+a()+a()+a()+a()+a()},typeOf:function(a){var b=typeof a;return b==="object"&&(a?typeof a.length=="number"&&!a.propertyIsEnumerable("length")&&typeof a.splice=="function"&&(b="array"):b="null"),b},isValid:function(a){return a.charAt(0)!=="_"},inherit:function(a,b){var c=function(){};c.prototype=b.prototype,a.prototype=new c},findKeys:function(a){var b=[];for(key in a)typeof a[key]=="function"&&util.isValid(key)&&b.push(key);return b},stringify:JSON.stringify,parse:JSON.parse,log:log,error:function(){util.log.apply(this,arguments)},warn:function(){util.log.apply(this,arguments)},info:function(){util.log.apply(this,arguments)},setLogLevel:function(a){a<3&&(util.info=function(){}),a<2&&(util.warn=function(){}),a<1&&(util.error=function(){})}},Ref=function(a,b,c){function d(){var a=[].slice.apply(arguments);d.call.apply(d,a)}return d._fixOps=function(){for(var a in d._operations){var b=d._operations[a];b!==null&&(d[b]=d._get(b).call)}},d._getRef=function(a){return d},d._setOps=function(a){return d._operations=a,d._fixOps(),d},d._toDict=function(){return{ref:d._pathchain,operations:d._operations}},d._get=function(a){return a=a.split("."),d._bridgeRoot.getPathObj(d._pathchain.concat(a))},d.call=function(){var a=[].slice.apply(arguments);return util.info("Calling",d._pathchain,a),d._bridgeRoot.send(a,d)},d.getLocalName=function(){return d._pathchain[2]},d._operations=c||[],d._bridgeRoot=a,d._pathchain=b,d._fixOps(),d},Serializer={serialize:function(a,b){var c=util.typeOf(b),d;switch(c){case"object":var e=!1,f=[],g=[],h,i;for(h in b){var i=b[h];typeof i=="function"&&util.isValid(h)?(g.push(h),e=!0):f.push(h)}b._getRef&&util.typeOf(b._getRef)==="function"&&(e=!0);if(e){var j;b._getRef&&util.typeOf(b._getRef)==="function"?j=b._getRef():j=a.createCallback(b);var k=j._setOps(g)._toDict();d=k}else{var l={};for(pos in f){var h=f[pos],i=b[h];l[h]=Serializer.serialize(a,i)}d=l}break;case"array":var l=[];for(pos in b){var i=b[pos];l.push(Serializer.serialize(a,i))}d=l;break;case"function":var k;if(b._getRef&&util.typeOf(b._getRef)==="function")k=b._getRef()._toDict();else{var m=function(){};m.callback=b;var j=a.createCallback(m);k=j._get("callback")._toDict()}d=k;break;default:d=b}return d},unserialize:function(a,b){for(var c in b){var d=b[c];typeof d=="object"&&(util.hasProp(d,"ref")?b[c]=a.getPathObj(d.ref)._setOps(d.operations):Serializer.unserialize(a,d))}}};Connection.prototype.reconnect=function(){util.info("Attempting reconnect");var a=this;!this.connected&&this.interval<12800&&setTimeout(function(){a.establishConnection()},this.interval*=2)},Connection.prototype.establishConnection=function(){var a=this,b=this.Bridge;this.options.tcp?(util.info("Starting TCP connection",this.options.host,this.options.port),this.sock=(new TCP(this.options)).sock):(util.info("Starting SockJS connection"),this.sock=new SockJS(this.options.protocol+this.options.host+":"+this.options.port+"/bridge",this.options.protocols,this.options.sockjs)),this.sock.Bridge=b,this.sock.onmessage=function(c){var d=function(a){try{a=util.parse(a.data),util.info("Received",a),b.onMessage(a)}catch(c){util.error("Message parsing failed: ",c.message,c.stack)}};util.info("clientId and secret received",c.data);var e=c.data.toString().split("|");e.length!==2?d(c):(a.clientId=e[0],a.secret=e[1],a.interval=400,a.sock.onmessage=d,b.onReady())},this.sock.onopen=function(){util.info("Beginning handshake");var b={command:"CONNECT",data:{session:[a.clientId||null,a.secret||null],api_key:a.options.apiKey}};b=util.stringify(b),a.sock._send?a.sock._send(b):a.sock.send(b)},this.sock.onclose=function(){util.warn("Connection closed"),a.connected=!1,a.options.reconnect&&a.reconnect()}},Connection.prototype.send=function(a,b){var c={command:"SEND",data:{args:Serializer.serialize(this.Bridge,a),destination:Serializer.serialize(this.Bridge,b)}};c=util.stringify(c),util.info("Sending",c),this.sock.send(c)},Connection.prototype.publishService=function(a,b){util.info("Joining worker pool",a);var c={command:"JOINWORKERPOOL",data:{name:a,callback:Serializer.serialize(this.Bridge,b)}};c=util.stringify(c),this.sock.send(c)},Connection.prototype.getService=function(a,b){var c={command:"GETOPS",data:{name:a,callback:Serializer.serialize(this.Bridge,b)}};c=util.stringify(c),this.sock.send(c)},Connection.prototype.getChannel=function(a,b){var c=this,d={command:"GETCHANNEL",data:{name:a,callback:Serializer.serialize(this.Bridge,function(d,e){if(e){b(null,e);return}b(c.Bridge.getPathObj(["channel",a,"channel:"+a])._setOps(d._operations),a)})}};d=util.stringify(d),this.sock.send(d)},Connection.prototype.joinChannel=function(a,b,c){var d={command:"JOINCHANNEL",data:{name:a,handler:Serializer.serialize(this.Bridge,b),callback:Serializer.serialize(this.Bridge,c)}};d=util.stringify(d),this.sock.send(d)},Connection.prototype.leaveChannel=function(a,b,c){var d={command:"LEAVECHANNEL",data:{name:a,handler:Serializer.serialize(this.Bridge,b),callback:Serializer.serialize(this.Bridge,c)}};d=util.stringify(d),this.sock.send(d)};var defaultOptions={protocol:"http://",redirector:"http://redirector.flotype.com",reconnect:!0,log:2,tcp:!1};Bridge.prototype.on=function(a,b){return util.hasProp(this._events,a)||(this._events[a]=[]),this._events[a].push(b),this},Bridge.prototype.emit=function(a,b){if(util.hasProp(this._events,a)){var c=this._events[a].slice(0);for(var d=0,e=c.length;d<e;d++)c[d].apply(this,b===undefined?[]:b)}return this},Bridge.prototype.removeEvent=function(a,b){if(util.hasProp(this._events,a))for(var c=0,d=this._events[a].length;c<d;c++)this._events[a][c]===b&&this._events[a].splice(c,1);return this},Bridge.prototype.onReady=function(){util.info("Handshake complete"),this.connected||(this.connected=!0,this.emit("ready"))},Bridge.prototype.onMessage=function(a){Serializer.unserialize(this,a);var b=a,c=b.destination;if(!c){util.warn("No destination in message",b);return}var d=b.destination._pathchain,e=b.args;this.execute(d,e)},Bridge.prototype.execute=function(a,b){var c=this.children[a[2]],d=c[a[3]];d?d.apply(c,b):util.warn("No Func nor Default Handler for",a)},Bridge.prototype.publishService=function(a,b,c){if(a==="system"){util.error("Invalid service name: "+a);return}var d=this;if(!b._getRef||util.typeOf(b._getRef)!=="function")return b._getRef=function(){return d.getPathObj(["named",a,a])},this.connection.publishService(a,c),this.children[a]=b,b._getRef();util.error("Service can't be renamed! "+a+" old "+b._getRef().getLocalName());return},Bridge.prototype.createCallback=function(a){var b=this,c,d;return!a._getRef||util.typeOf(a._getRef)!=="function"?(c=util.generateGuid(),d=b.getPathObj(["client",b.getClientId(),c]),this.children[c]=a):d=a._getRef(),d},Bridge.prototype.joinChannel=function(a,b,c){this.connection.joinChannel(a,b,c)},Bridge.prototype.leaveChannel=function(a,b,c){this.connection.leaveChannel(a,b,c)},Bridge.prototype.send=function(a,b){this.connection.send(a,b)},Bridge.prototype.getPathObj=function(a){return new Ref(this,a)},Bridge.prototype.getRootRef=function(){return this.getPathObj(["client",this.getClientId()])},Bridge.prototype._get=function(a){var b=a.split(".");return this.getPathObj(b,!0)},Bridge.prototype.ready=function(a){this.connected?a():this.on("ready",a)},Bridge.prototype.getClientId=function(){return this.connection.clientId},Bridge.prototype.getService=function(a,b){this.connection.getService(a,b)},Bridge.prototype.getChannel=function(a,b){this.connection.getChannel(a,b)}